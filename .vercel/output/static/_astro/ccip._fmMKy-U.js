import{B as l,h as w,i as y,j as p,I as h,k as g,m as k,o as O,q as L,H as m,r as E}from"./mint.Rz8Ab1_Y.js";import"./index.LFf77hJu.js";class x extends l{constructor({callbackSelector:e,cause:r,data:n,extraData:c,sender:i,urls:s}){super(r.shortMessage||"An error occurred while fetching for an offchain result.",{cause:r,metaMessages:[...r.metaMessages||[],r.metaMessages?.length?"":[],"Offchain Gateway Call:",s&&["  Gateway URL(s):",...s.map(d=>`    ${w(d)}`)],`  Sender: ${i}`,`  Data: ${n}`,`  Callback selector: ${e}`,`  Extra data: ${c}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class M extends l{constructor({result:e,url:r}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${w(r)}`,`Response: ${y(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class R extends l{constructor({sender:e,to:r}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${r}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}function $(t,e){if(!p(t))throw new h({address:t});if(!p(e))throw new h({address:e});return t.toLowerCase()===e.toLowerCase()}const C="0x556f1830",S={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function P(t,{blockNumber:e,blockTag:r,data:n,to:c}){const{args:i}=g({data:n,abi:[S]}),[s,d,a,o,f]=i;try{if(!$(c,s))throw new R({sender:s,to:c});const u=await A({data:a,sender:s,urls:d}),{data:b}=await L(t,{blockNumber:e,blockTag:r,data:O([o,k([{type:"bytes"},{type:"bytes"}],[u,f])]),to:c});return b}catch(u){throw new x({callbackSelector:o,cause:u,data:n,extraData:f,sender:s,urls:d})}}async function A({data:t,sender:e,urls:r}){let n=new Error("An unknown error occurred.");for(let c=0;c<r.length;c++){const i=r[c],s=i.includes("{data}")?"GET":"POST",d=s==="POST"?{data:t,sender:e}:void 0;try{const a=await fetch(i.replace("{sender}",e).replace("{data}",t),{body:JSON.stringify(d),method:s});let o;if(a.headers.get("Content-Type")?.startsWith("application/json")?o=(await a.json()).data:o=await a.text(),!a.ok){n=new m({body:d,details:o?.error?y(o.error):a.statusText,headers:a.headers,status:a.status,url:i});continue}if(!E(o)){n=new M({result:o,url:i});continue}return o}catch(a){n=new m({body:d,details:a.message,url:i})}}throw n}export{A as ccipFetch,P as offchainLookup,S as offchainLookupAbiItem,C as offchainLookupSignature};
